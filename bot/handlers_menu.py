"""Handlers for the main menu flow."""

from telegram import Update
from telegram.ext import ContextTypes

from .keyboards import main_menu_kb, continent_kb, direction_kb

WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞–Ω–∏–π —Å—Ç–æ–ª–∏—Ü—ã ‚Üî —Å—Ç—Ä–∞–Ω–∞.\n"
    "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:"
)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id, WELCOME, reply_markup=main_menu_kb())

async def cb_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle all ``^menu:`` callbacks."""

    q = update.callback_query
    await q.answer()
    data = q.data

    if data in {"menu:cards", "menu:sprint"}:
        mode = data.split(":")[1]
        text = "üìò –§–ª—ç—à-–∫–∞—Ä—Ç–æ—á–∫–∏: –≤—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç." if mode == "cards" else "‚è± –ò–≥—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è: –≤—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç."
        await q.edit_message_text(text, reply_markup=continent_kb(f"menu:{mode}"))

    elif data.startswith("menu:cards:") or data.startswith("menu:sprint:"):
        parts = data.split(":", 2)
        mode = parts[1]
        continent = parts[2]
        context.user_data["continent"] = continent
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤:",
            reply_markup=direction_kb(mode, continent),
        )

    elif data == "menu:coop":
        await q.edit_message_text(
            "ü§ù –î—É—ç—Ç –ø—Ä–æ—Ç–∏–≤ –ë–æ—Ç–∞: –∑–∞–ø—É—Å–∫–∞–π –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /coop_capitals",
            reply_markup=None,
        )
