"""Inline keyboards used across the bot menus."""

from telegram import InlineKeyboardMarkup, InlineKeyboardButton


def main_menu_kb() -> InlineKeyboardMarkup:
    """Top-level menu with three game modes."""
    rows = [
        [InlineKeyboardButton("üìò –§–ª—ç—à-–∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="menu:cards")],
        [InlineKeyboardButton("‚è± –ò–≥—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è", callback_data="menu:sprint")],
        [InlineKeyboardButton("ü§ù –î—É—ç—Ç –ø—Ä–æ—Ç–∏–≤ –ë–æ—Ç–∞", callback_data="menu:coop")],
    ]
    return InlineKeyboardMarkup(rows)


CONTINENTS = [
    "–ï–≤—Ä–æ–ø–∞",
    "–ê–∑–∏—è",
    "–ê—Ñ—Ä–∏–∫–∞",
    "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞",
    "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞",
    "–û–∫–µ–∞–Ω–∏—è",
    "–í–µ—Å—å –º–∏—Ä",
]


def continent_kb(prefix: str) -> InlineKeyboardMarkup:
    """Keyboard for choosing a continent.

    ``prefix`` should be ``menu:cards`` or ``menu:sprint`` so that callback data
    stays within the ``^menu:`` namespace while the user makes selections.
    """

    rows = [[InlineKeyboardButton(c, callback_data=f"{prefix}:{c}")] for c in CONTINENTS]
    return InlineKeyboardMarkup(rows)


def direction_kb(prefix: str, continent: str) -> InlineKeyboardMarkup:
    """Keyboard for choosing question direction.

    ``prefix`` is the final namespace (``cards`` or ``sprint``) so that pressing
    a button dispatches to the respective handler via ``^cards:``/``^sprint:``.
    """

    rows = [
        [
            InlineKeyboardButton(
                "–°—Ç—Ä–∞–Ω–∞ ‚Üí —Å—Ç–æ–ª–∏—Ü–∞",
                callback_data=f"{prefix}:{continent}:country_to_capital",
            )
        ],
        [
            InlineKeyboardButton(
                "–°—Ç–æ–ª–∏—Ü–∞ ‚Üí —Å—Ç—Ä–∞–Ω–∞",
                callback_data=f"{prefix}:{continent}:capital_to_country",
            )
        ],
        [
            InlineKeyboardButton(
                "–°–º–µ—à–∞–Ω–Ω—ã–π",
                callback_data=f"{prefix}:{continent}:mixed",
            )
        ],
    ]
    return InlineKeyboardMarkup(rows)


def cards_kb() -> InlineKeyboardMarkup:
    """Controls for a flash-card question."""
    rows = [
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data="cards:show")],
        [
            InlineKeyboardButton("‚úÖ –ó–Ω–∞—é", callback_data="cards:know"),
            InlineKeyboardButton("‚ùå –ù–µ –∑–Ω–∞—é", callback_data="cards:dont"),
        ],
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="cards:skip")],
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cards:finish")],
    ]
    return InlineKeyboardMarkup(rows)


def cards_repeat_kb() -> InlineKeyboardMarkup:
    """Keyboard shown after session to repeat unknown cards."""
    rows = [
        [InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="cards:repeat")],
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cards:finish")],
    ]
    return InlineKeyboardMarkup(rows)


def sprint_kb(options: list[str], allow_skip: bool = True) -> InlineKeyboardMarkup:
    """Keyboard for sprint questions with four options and optional skip."""
    buttons = [
        InlineKeyboardButton(opt, callback_data=f"sprint:opt:{i}")
        for i, opt in enumerate(options)
    ]
    rows = [buttons[:2], buttons[2:4]]
    if allow_skip:
        rows.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="sprint:skip")])
    return InlineKeyboardMarkup(rows)

